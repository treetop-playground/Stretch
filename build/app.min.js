var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);
$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})}};
$jscomp.polyfill("Array.from",function(a){return a?a:function(a,c,d){c=null!=c?c:function(a){return a};var b=[],f="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];if("function"==typeof f){a=f.call(a);for(var g=0;!(f=a.next()).done;)b.push(c.call(d,f.value,g++))}else for(f=a.length,g=0;g<f;g++)b.push(c.call(d,a[g],g));return b}},"es6","es3");
$jscomp.polyfill("Array.prototype.fill",function(a){return a?a:function(a,c,d){var b=this.length||0;0>c&&(c=Math.max(0,b+c));if(null==d||d>b)d=b;d=Number(d);0>d&&(d=Math.max(0,b+d));for(c=Number(c||0);c<d;c++)this[c]=a;return this}},"es6","es3");$jscomp.polyfill("Object.is",function(a){return a?a:function(a,c){return a===c?0!==a||1/a===1/c:a!==a&&c!==c}},"es6","es3");
$jscomp.polyfill("Array.prototype.includes",function(a){return a?a:function(a,c){var b=this;b instanceof String&&(b=String(b));var e=b.length;c=c||0;for(0>c&&(c=Math.max(c+e,0));c<e;c++){var f=b[c];if(f===a||Object.is(f,a))return!0}return!1}},"es7","es3");
$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return a+""};$jscomp.polyfill("String.prototype.includes",function(a){return a?a:function(a,c){return-1!==$jscomp.checkStringArgs(this,a,"includes").indexOf(a,c||0)}},"es6","es3");
function init(a){var b=new THREE.MeshPhysicalMaterial({color:3750201,metalness:.9,roughness:.4,dithering:!0}),c=new THREE.PlaneBufferGeometry(16E3,16E3);b=new THREE.Mesh(c,b);b.receiveShadow=!0;b.rotation.x+=.9*Math.PI;b.position.set(0,-100,2E3);a.add(b)}var geometry,faces,colors,vertices=[],constraints=[];
function calculate(){var a=new THREE.IcosahedronBufferGeometry(100,5);geometry=THREE.BufferGeometryUtils.mergeVertices(a,1.5);populateVertices();faces=Array.from({length:vertices.length},function(){return[]});colors=Array.from({length:vertices.length},function(){return Array(8).fill()});populateConstraints();populateColors()}function populateVertices(){for(var a=new THREE.Vector3,b=geometry.attributes.position,c=0,d=b.count;c<d;c++)a.fromBufferAttribute(b,c),vertices.push(a.clone())}
function populateConstraints(){for(var a=geometry.index,b=Array.from({length:vertices.length},function(){return[]}),c=0,d=a.count/3;c<d;c++){var e=3*c,f=a.getX(e+0),g=a.getX(e+1);e=a.getX(e+2);faces[f].push([g,e]);faces[g].push([e,f]);faces[e].push([f,g]);b[g].includes(f)||(b[f].push(g),b[g].push(f),constraints.push([f,g]));b[e].includes(f)||(b[f].push(e),b[e].push(f),constraints.push([f,e]));b[e].includes(g)||(b[g].push(e),b[e].push(g),constraints.push([g,e]))}}
function populateColors(){for(var a=0,b=constraints.length;a<b;a++)for(var c=constraints[a],d=0;;){for(;void 0!==colors[c[0]][d];)d++;if(void 0===colors[c[1]][d]){colors[c[0]][d]=c[1];colors[c[1]][d]=c[0];break}else d++}}function dispose(){constraints=colors=faces=void 0}var camera,interacting=!1,psel=void 0,mouse=new THREE.Vector2,tmpmouse=new THREE.Vector3,mouse3d=new THREE.Vector3,raycaster=new THREE.Raycaster,plane=new THREE.Plane(void 0,-180),sphere=new THREE.Sphere(void 0,100);
function init$1(a){camera=a;window.addEventListener("mousemove",onMouseMove);window.addEventListener("mousedown",onMouseDown);window.addEventListener("mouseup",onMouseUp)}
function updating(){if(interacting){raycaster.setFromCamera(mouse,camera);if(null!=raycaster.ray.intersectSphere(sphere,tmpmouse)&&(mouse3d.copy(tmpmouse),void 0==psel))for(var a=Infinity,b=0;b<vertices.length;b++){var c=mouse3d.distanceTo(vertices[b]);c<a&&(a=c,psel=b)}plane.normal.copy(camera.position).normalize();null!=raycaster.ray.intersectPlane(plane,tmpmouse)&&mouse3d.copy(tmpmouse);return interacting&&psel?!0:!1}}
function onMouseMove(a){mouse.x=a.pageX/window.innerWidth*2-1;mouse.y=2*-(a.pageY/window.innerHeight)+1}function onMouseDown(a){0==a.button&&(interacting=!0)}function onMouseUp(a){0==a.button&&(interacting=!1,psel=void 0)}
var through_vert="\nprecision highp float;\nattribute vec2 position;\nvoid main() {\n\tgl_Position = vec4( position, vec2(1.0) );\n}\n",constraints_frag="\nprecision highp float;\nuniform int cID;\nuniform vec2 tSize;\nuniform sampler2D tPosition;\nuniform sampler2D tOriginal;\nuniform sampler2D tConstraints;\nvec2 getUV( float id ) {\n\tfloat div = id / tSize.x;\n\tfloat d = floor( div );\n\tfloat y = d / tSize.x;\n\tfloat x = div - d;\n\tfloat off = 0.5 / tSize.x;\n\treturn vec2( x + off, y + off );\n}\nvoid main() {\n\tvec2 uv = gl_FragCoord.xy / tSize.xy;\n\tvec3 orgA = texture2D( tOriginal, uv ).xyz;\n\tvec3 posA = texture2D( tPosition, uv ).xyz;\n\tfloat id;\n\tif ( cID == 0 )\n\t\tid = texture2D( tConstraints, uv )[0];\n\tif ( cID == 1 )\n\t\tid = texture2D( tConstraints, uv )[1];\n\tif ( cID == 2 )\n\t\tid = texture2D( tConstraints, uv )[2];\n\tif ( cID == 3 )\n\t\tid = texture2D( tConstraints, uv )[3];\n\tuv = getUV( id );\n\tvec3 orgB = texture2D( tOriginal, uv ).xyz;\n\tvec3 posB = texture2D( tPosition, uv ).xyz;\n\tvec3 offOrg = ( orgB - orgA );\n\tvec3 offCur = ( posB - posA );\n\tfloat restDist = dot( offOrg, offOrg );\n\tfloat curDist = dot( offCur, offCur );\n\tfloat diff = restDist / ( curDist + restDist ) - 0.5;\n\tif ( diff > 0.0 ) diff *= 0.2;\n\tif ( id == -1.0 ) diff = 0.0;\n\tposA -= offCur * diff * 0.52;\n\tgl_FragColor = vec4( posA, 1.0 );\n}\n",integrate_frag=
"\nprecision highp float;\nuniform vec2 tSize;\nuniform sampler2D tOriginal;\nuniform sampler2D tPrevious;\nuniform sampler2D tPosition;\nvoid main() {\n\tfloat dt2 = 0.000256;\n\tvec2 uv = gl_FragCoord.xy / tSize.xy;\n\tvec3 org = texture2D( tOriginal, uv ).xyz;\n\tvec3 prv = texture2D( tPrevious, uv ).xyz;\n\tvec3 pos = texture2D( tPosition, uv ).xyz;\n\tvec3 offset = ( org - pos ) * 28.5 * dt2 * 8.33333;\n\tvec3 disp = ( pos - prv ) * 0.91 + pos;\n\tgl_FragColor = vec4( disp + offset, 1.0 );\n}\n",
mouse_frag="\nprecision highp float;\nuniform int psel;\nuniform vec2 tSize;\nuniform vec3 mouse;\nuniform sampler2D tPosition;\nuniform sampler2D tOriginal;\nvec2 getUV( float id ) {\n\tfloat div = id / tSize.x;\n\tfloat d = floor( div );\n\tfloat y = d / tSize.x;\n\tfloat x = div - d;\n\tfloat off = 0.5 / tSize.x;\n\treturn vec2( x + off, y + off );\n}\nvoid main() {\n\tvec2 uv = gl_FragCoord.xy / tSize.xy;\n\tvec3 pos = texture2D( tPosition, uv ).xyz;\n\tvec3 org = texture2D( tOriginal, uv ).xyz;\n\tuv = getUV( float( psel ) );\n\tvec3 ref = texture2D( tOriginal, uv ).xyz;\n\tvec3 offset = mouse - ref;\n\tif ( distance( org, ref ) <= 15.0 )  {\n\t\tpos = org + offset;\n\t}\n\tgl_FragColor = vec4( pos, 1.0 );\n}\n",
normals_frag="\nprecision highp float;\nuniform int cID;\nuniform vec2 tSize;\nuniform sampler2D tPosition;\nuniform sampler2D tFace1;\nuniform sampler2D tFace2;\nuniform sampler2D tFace3;\nvec2 getUV( float id ) {\n\tfloat div = id / tSize.x;\n\tfloat d = floor( div );\n\tfloat y = d / tSize.x;\n\tfloat x = div - d;\n\tfloat off = 0.5 / tSize.x;\n\treturn vec2( x + off, y + off );\n}\nvoid main() {\n\tvec2 uv = gl_FragCoord.xy / tSize.xy;\n\tvec3 a = texture2D( tPosition, uv ).xyz;\n\tvec2 uvB, uvC;\n\tvec3 normals, fNormal, b, c;\n\tfloat idB, idC;\n\t// face0\n\tidB = texture2D( tFace1, uv ).x;\n\tidC = texture2D( tFace1, uv ).y;\n\tuvB = getUV( idB );\n\tuvC = getUV( idC );\n\tb = texture2D( tPosition, uvB ).xyz;\n\tc = texture2D( tPosition, uvC ).xyz;\n\tfNormal = cross( ( c - b ), ( a - b ) );\n\tif ( idB != - 1.0 ) normals += fNormal;\n\t// face1\n\tidB = texture2D( tFace1, uv ).z;\n\tidC = texture2D( tFace1, uv ).w;\n\tuvB = getUV( idB );\n\tuvC = getUV( idC );\n\tb = texture2D( tPosition, uvB ).xyz;\n\tc = texture2D( tPosition, uvC ).xyz;\n\tfNormal = cross( ( c - b ), ( a - b ) );\n\tif ( idB != - 1.0 ) normals += fNormal;\n\t// face2\n\tidB = texture2D( tFace2, uv ).x;\n\tidC = texture2D( tFace2, uv ).y;\n\tuvB = getUV( idB );\n\tuvC = getUV( idC );\n\tb = texture2D( tPosition, uvB ).xyz;\n\tc = texture2D( tPosition, uvC ).xyz;\n\tfNormal = cross( ( c - b ), ( a - b ) );\n    if ( idB != -1.0 ) normals += fNormal;\n\t// face3\n\tidB = texture2D( tFace2, uv ).z;\n\tidC = texture2D( tFace2, uv ).w;\n\tuvB = getUV( idB );\n\tuvC = getUV( idC );\n\tb = texture2D( tPosition, uvB ).xyz;\n\tc = texture2D( tPosition, uvC ).xyz;\n\tfNormal = cross( ( c - b ), ( a - b ) );\n\tif ( idB != - 1.0 ) normals += fNormal;\n\t// face4\n\tidB = texture2D( tFace3, uv ).x;\n\tidC = texture2D( tFace3, uv ).y;\n\tuvB = getUV( idB );\n\tuvC = getUV( idC );\n\tb = texture2D( tPosition, uvB ).xyz;\n\tc = texture2D( tPosition, uvC ).xyz;\n\tfNormal = cross( ( c - b ), ( a - b ) );\n\tif ( idB != - 1.0 ) normals += fNormal;\n\t// face5\n\tidB = texture2D( tFace3, uv ).z;\n\tidC = texture2D( tFace3, uv ).w;\n\tuvB = getUV( idB );\n\tuvC = getUV( idC );\n\tb = texture2D( tPosition, uvB ).xyz;\n\tc = texture2D( tPosition, uvC ).xyz;\n\tfNormal = cross( ( c - b ), ( a - b ) );\n\tif ( idB != - 1.0 ) normals += fNormal;\n\tgl_FragColor = vec4( normals, 1.0 );\n}\n",
through_frag="\nprecision highp float;\nuniform vec2 tSize;\nuniform sampler2D texture;\nvoid main() {\n\tvec2 uv = gl_FragCoord.xy / tSize.xy;\n\tgl_FragColor = texture2D( texture, uv );\n}\n",copyShader=new THREE.RawShaderMaterial({uniforms:{tSize:{type:"v2"},texture:{type:"t"}},vertexShader:through_vert,fragmentShader:through_frag,fog:!1,lights:!1,depthWrite:!1,depthTest:!1}),integrateShader=copyShader.clone();integrateShader.fragmentShader=integrate_frag;
integrateShader.uniforms={tSize:{type:"v2"},tOriginal:{type:"t"},tPrevious:{type:"t"},tPosition:{type:"t"}};var mouseShader=copyShader.clone();mouseShader.fragmentShader=mouse_frag;mouseShader.uniforms={psel:{value:null},tSize:{type:"v2"},mouse:{type:"v3"},tOriginal:{type:"t"},tPosition:{type:"t"}};var constraintsShader=copyShader.clone();constraintsShader.fragmentShader=constraints_frag;constraintsShader.uniforms={cID:{value:null},tSize:{type:"v2"},tOriginal:{type:"t"},tPosition:{type:"t"},tConstraints:{type:"t"}};
var normalsShader=copyShader.clone();normalsShader.fragmentShader=normals_frag;normalsShader.uniforms={tSize:{type:"v2"},tPosition:{type:"t"},tFace1:{type:"t"},tFace2:{type:"t"},tFace3:{type:"t"}};var RESOLUTION,renderer,mesh,targetRT,normalsRT,originalRT,previousRT,positionRT,constraintsRT,facesRT,steps=40,tSize=new THREE.Vector2,scene=new THREE.Scene,camera$1=new THREE.Camera;
function init$2(a){renderer=a;RESOLUTION=Math.ceil(Math.sqrt(vertices.length));tSize.set(RESOLUTION,RESOLUTION);a=new THREE.BufferGeometry;var b=new Float32Array([-1,-1,3,-1,-1,3]);a.addAttribute("position",new THREE.BufferAttribute(b,2));mesh=new THREE.Mesh(a,copyShader);mesh.frustumCulled=!1;scene.add(mesh);originalRT=createRenderTarget();targetRT=createRenderTarget();previousRT=createRenderTarget();positionRT=createRenderTarget();normalsRT=createRenderTarget();constraintsRT=Array.from({length:2},
createRenderTarget);facesRT=Array.from({length:3},createRenderTarget);copyTexture(createPositionTexture(),originalRT);copyTexture(originalRT,previousRT);copyTexture(originalRT,positionRT);copyTexture(createConstraintsTexture(0),constraintsRT[0]);copyTexture(createConstraintsTexture(4),constraintsRT[1]);copyTexture(createFacesTexture(0),facesRT[0]);copyTexture(createFacesTexture(2),facesRT[1]);copyTexture(createFacesTexture(4),facesRT[2])}
function copyTexture(a,b){mesh.material=copyShader;copyShader.uniforms.tSize.value=tSize;copyShader.uniforms.texture.value=a.texture;renderer.setRenderTarget(b);renderer.render(scene,camera$1)}
function createRenderTarget(){return new THREE.WebGLRenderTarget(RESOLUTION,RESOLUTION,{wrapS:THREE.ClampToEdgeWrapping,wrapT:THREE.ClampToEdgeWrapping,minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,depthTest:!1,depthWrite:!1,depthBuffer:!1,stencilBuffer:!1})}
function createPositionTexture(){for(var a=new Float32Array(RESOLUTION*RESOLUTION*4),b=vertices.length,c=0;c<b;c++){var d=4*c;a[d]=vertices[c].x;a[d+1]=vertices[c].y;a[d+2]=vertices[c].z}b={};b.texture=new THREE.DataTexture(a,RESOLUTION,RESOLUTION,THREE.RGBAFormat,THREE.FloatType);b.texture.minFilter=THREE.NearestFilter;b.texture.magFilter=THREE.NearestFilter;b.texture.needsUpdate=!0;b.texture.generateMipmaps=!1;b.texture.flipY=!1;return b}
function createConstraintsTexture(a){for(var b=new Float32Array(RESOLUTION*RESOLUTION*4),c=vertices.length,d=0;d<c;d++){var e=4*d;b[e]=void 0===colors[d][a+0]?-1:colors[d][a+0];b[e+1]=void 0===colors[d][a+1]?-1:colors[d][a+1];b[e+2]=void 0===colors[d][a+2]?-1:colors[d][a+2];b[e+3]=void 0===colors[d][a+3]?-1:colors[d][a+3]}a={};a.texture=new THREE.DataTexture(b,RESOLUTION,RESOLUTION,THREE.RGBAFormat,THREE.FloatType);a.texture.minFilter=THREE.NearestFilter;a.texture.magFilter=THREE.NearestFilter;a.texture.needsUpdate=
!0;a.texture.generateMipmaps=!1;a.texture.flipY=!1;return a}
function createFacesTexture(a){for(var b=new Float32Array(RESOLUTION*RESOLUTION*4),c=vertices.length,d=0;d<c;d++){var e=4*d;b[e]=void 0===faces[d][a+0]?-1:faces[d][a+0][0];b[e+1]=void 0===faces[d][a+0]?-1:faces[d][a+0][1];b[e+2]=void 0===faces[d][a+1]?-1:faces[d][a+1][0];b[e+3]=void 0===faces[d][a+1]?-1:faces[d][a+1][1]}a={};a.texture=new THREE.DataTexture(b,RESOLUTION,RESOLUTION,THREE.RGBAFormat,THREE.FloatType);a.texture.minFilter=THREE.NearestFilter;a.texture.magFilter=THREE.NearestFilter;a.texture.needsUpdate=
!0;a.texture.generateMipmaps=!1;a.texture.flipY=!1;return a}function integrate(){mesh.material=integrateShader;integrateShader.uniforms.tSize.value=tSize;integrateShader.uniforms.tOriginal.value=originalRT.texture;integrateShader.uniforms.tPrevious.value=previousRT.texture;integrateShader.uniforms.tPosition.value=positionRT.texture;renderer.setRenderTarget(targetRT);renderer.render(scene,camera$1);var a=previousRT;previousRT=positionRT;positionRT=targetRT;targetRT=a}
function solveConstraints(a){mesh.material=constraintsShader;constraintsShader.uniforms.tSize.value=tSize;constraintsShader.uniforms.cID.value=a%4;constraintsShader.uniforms.tOriginal.value=originalRT.texture;constraintsShader.uniforms.tPosition.value=positionRT.texture;constraintsShader.uniforms.tConstraints.value=constraintsRT[4>a?0:1].texture;renderer.setRenderTarget(targetRT);renderer.render(scene,camera$1);a=positionRT;positionRT=targetRT;targetRT=a}
function mouseOffset(){mesh.material=mouseShader;mouseShader.uniforms.tSize.value=tSize;mouseShader.uniforms.psel.value=psel;mouseShader.uniforms.mouse.value=mouse3d;mouseShader.uniforms.tOriginal.value=originalRT.texture;mouseShader.uniforms.tPosition.value=positionRT.texture;renderer.setRenderTarget(targetRT);renderer.render(scene,camera$1);var a=positionRT;positionRT=targetRT;targetRT=a}
function computeVertexNormals(){mesh.material=normalsShader;normalsShader.uniforms.tSize.value=tSize;normalsShader.uniforms.tPosition.value=positionRT.texture;normalsShader.uniforms.tFace1.value=facesRT[0].texture;normalsShader.uniforms.tFace2.value=facesRT[1].texture;normalsShader.uniforms.tFace3.value=facesRT[2].texture;renderer.setRenderTarget(normalsRT);renderer.render(scene,camera$1)}
function update(){integrate();for(var a=0;a<steps;a++){updating()&&mouseOffset();for(var b=0;8>b;b++)solveConstraints(b);for(b=7;0<=b;b--)solveConstraints(b)}computeVertexNormals()}var RESOLUTION$1,mesh$1;
function init$3(a){RESOLUTION$1=Math.ceil(Math.sqrt(vertices.length));var b=new THREE.MeshPhysicalMaterial({color:16767520,metalness:.1,roughness:.5,clearcoat:.8,clearcoatRoughness:.3,dithering:!0});b.onBeforeCompile=function(a){a.uniforms.tPosition={value:positionRT.texture};a.uniforms.tNormal={value:normalsRT.texture};a.vertexShader="uniform sampler2D tPosition;\nuniform sampler2D tNormal;\n"+a.vertexShader;a.vertexShader=a.vertexShader.replace("#include <beginnormal_vertex>","vec3 transformed = texture2D(tPosition, position.xy).xyz;\n                        vec3 objectNormal = normalize( texture2D( tNormal, position.xy ).xyz );\n                        ");
a.vertexShader=a.vertexShader.replace("#include <begin_vertex>","")};var c=new THREE.MeshDepthMaterial;c.onBeforeCompile=function(a){a.uniforms.tPosition={value:positionRT.texture};a.vertexShader="uniform sampler2D tPosition;\n"+a.vertexShader;a.vertexShader=a.vertexShader.replace("#include <begin_vertex>","vec3 transformed = texture2D( tPosition, position.xy ).xyz;")};for(var d=new Float32Array(RESOLUTION$1*RESOLUTION$1*3),e=0,f=RESOLUTION$1*RESOLUTION$1;e<f;e++){var g=3*e;d[g+0]=e%RESOLUTION$1/
RESOLUTION$1+.5/RESOLUTION$1;d[g+1]=~~(e/RESOLUTION$1)/RESOLUTION$1+.5/RESOLUTION$1}e=new THREE.BufferGeometry;e.setIndex(geometry.index);e.addAttribute("position",new THREE.BufferAttribute(d,3));mesh$1=new THREE.Mesh(e,b);mesh$1.customDepthMaterial=c;mesh$1.castShadow=!0;a.add(mesh$1)}var objects,clock=new THREE.Clock;
function init$4(a){var b=new THREE.AmbientLight(4542533,0),c=new THREE.SpotLight(16616331,0,4E3,Math.PI/6,.2,.11);c.position.set(.9,.1,-.5).multiplyScalar(400);c.castShadow=!0;c.shadow.radius=20;c.shadow.camera.far=4E3;c.shadow.mapSize.height=4096;c.shadow.mapSize.width=4096;var d=new THREE.SpotLight(7043828,0,4E3,Math.PI/6,.2,.11);d.position.set(-.91,.1,-.5).multiplyScalar(400);d.castShadow=!0;d.shadow.radius=20;d.shadow.camera.far=4E3;d.shadow.mapSize.height=4096;d.shadow.mapSize.width=4096;var e=
new THREE.SpotLight(8750469,0,4E3,Math.PI/5.5,1.4,.02);e.position.set(0,0,-1).multiplyScalar(400);e.castShadow=!0;e.shadow.radius=5;e.shadow.camera.far=4E3;e.shadow.mapSize.height=4096;e.shadow.mapSize.width=4096;a.add(b,c,d,e);objects=[b,c,d,e]}function update$1(){var a=clock.getElapsedTime();if(1<a&&4>a)for(var b=0;b<objects.length;b++){var c=objects[b];var d=(a-1)/3;var e=1>(d/=.5)?1.3*d*d*d:1.3*((d-=2)*d*d+2);c.intensity=e}}var renderer$1,camera$2,scene$1;
function init$5(){renderer$1=new THREE.WebGLRenderer({antialias:!0});renderer$1.setSize(window.innerWidth,window.innerHeight);renderer$1.setPixelRatio(window.devicePixelRatio);renderer$1.gammaOutput=!0;renderer$1.physicallyCorrectLights=!0;renderer$1.shadowMap.enabled=!0;renderer$1.shadowMap.type=THREE.PCFShadowMap;document.body.appendChild(renderer$1.domElement);scene$1=new THREE.Scene;scene$1.background=new THREE.Color(1184530);camera$2=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,
1,1E4);camera$2.position.z=-350;camera$2.position.y=-50;camera$2.position.x=0;camera$2.lookAt(new THREE.Vector3);calculate();init(scene$1);init$4(scene$1);init$3(scene$1);init$1(camera$2);init$2(renderer$1);dispose();animate()}function animate(){requestAnimationFrame(animate);update$1();update();renderer$1.setRenderTarget(null);renderer$1.render(scene$1,camera$2)}
window.onresize=function(){var a=window.innerWidth,b=window.innerHeight;camera$2.aspect=a/b;camera$2.updateProjectionMatrix();renderer$1.setSize(a,b)};init$5();